SYNTAX:
command [OPTIONS] arguments

COMMANDS:
ps -> print shell
date -> data atual
pwd -> print working directory
ls -> lista os ficheiros na diretoria atual
echo -> faz print a uma string de texto ou ao valor de uma variavel no terminal
man -> manual
    exemplo: man ls -> manual do comando para criar listas
chmod -> muda a ownership de um ficheiro/pasta
    u -> representa o utilizador atual
    whoami -> devolve o utilizador atual
    exemplo: chmod u+x run_all.sh
        |-> dá permissão ao utilizador atual para executar o ficheiro run_all.sh

* Bash scripts começam com '#'
* which bash -> devolve a diretoria da bash
* # -> usados para comentar
* não há data types em Bash
    exemplo: country=Pakistan
* é preciso usar '$' para aceder a variáveis já existentes (referência)
    exemplo: same_country=$country

* $1 denota o argumento inicial a ser passado, $2 denota o segundo...

* Escrever num ficheiro
    exemplo: echo "This is some text." > output.txt
* Acescentar a um ficheiro
    exemplo: echo "More text" >> output.txt
* Redirecionar output
    exemplo: ls > files.txt

COMANDOS BÁCISOS:
cd -> diretoria atual
ls -> lista
mkdir -> criar pasta
touch -> cria um novo ficheiro
rm -> remove um ficheiro ou diretoria
cp -> copia um ficheiro ou diretoria
mv -> move um ficheiro ou diretoria
echo -> imprime uma string ou o conteúdo de um ficheiro no terminal
cat -> concatena e imprime o conteúdo de um ficheiro
grep -> procura um padrão num ficheiro
chmod -> muda as permissões de um ficheiro
sudo -> corre um comando com privilégios administrativos
df -> mostra a quantidade de espaço em disco disponível
history -> mostra uma lista com o comandos executados anteriormente
ps -> mostra informação sobre os processos a correr
which bash -> devolve a localização do bash

OUTROS OPERADORES:
-gt -> greater than
-ge -> greater or equal
-lt -> less than
-le -> lesser or equal
-a -> e (and)
-o -> ou (or)

CONDICIONAIS:
if
else
elif
    exemplo:
        if [[ condition ]]; then
            statement
        elif [[ condition ]]; then
            statement 
        else
        do this by default
        fi

CASE STATEMENTS:
case expression in
    pattern1)
        # code to execute if expression matches pattern1
        ;;
    pattern2)
        # code to execute if expression matches pattern2
        ;;
    pattern3)
        # code to execute if expression matches pattern3
        ;;
    *)
        # code to execute if none of the above patterns match expression
        ;;
esac

Cron
Schedule	Description	                                            Example
0 0	        Run a script at midnight every day	                    0 0 /path/to/script.sh
/5	        Run a script every 5 minutes	                        /5 /path/to/script.sh
0 6 1-5	    Run a script at 6 am from Monday to Friday	            0 6 1-5 /path/to/script.sh
0 0 1-7	    Run a script on the first 7 days of every month	        0 0 1-7 /path/to/script.sh
0 12 1	    Run a script on the first day of every month at noon	0 12 1 /path/to/script.sh

crontab -l -> lista os crons do utilizador atual

DEBUGGING
set -x (no ínicio do script) -> permite debugging mode
    exemplo:
        #!/bin/bash
        set -x
        # script goes here
            |-> faz com que o Bash imprima cada comando que foi executado no terminado (seguido de um +)
$? -> variável que guarda o exit code do comando executado mais recentemente
    exemplo:
        #!/bin/bash
        # Your script goes here
        if [ $? -ne 0 ]; then
            echo "Error occurred."
        fi
    |-> também é possível usar echos para fazer debugging
set -e -> faz com que o script pare de ser executado assim que um erro acontece